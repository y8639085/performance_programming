Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823

Compiler options: -g -Ofast -restrict -qopenmp-simd -ipo -xCORE-AVX2 -qopt-report-file=compilerreport.txt -qopt-report=5 -o MD -lm

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main) [1/7=14.3%] control.c(14,33)
  -> INLINE (MANUAL): (28,11) atoi.2 (isz = 4) (sz = 11)
    -> EXTERN: /usr/include/stdlib.h:(280,16) strtol
  -> EXTERN: (37,8) fopen
  -> EXTERN: (40,5) perror
  -> EXTERN: (41,5) exit
  -> EXTERN: (45,5) fscanf
  -> EXTERN: (50,3) fclose
  -> INLINE: (56,11) second (isz = 10) (sz = 15)
    -> EXTERN: (98,13) gettimeofday
  -> INLINE: (58,13) second (isz = 10) (sz = 15)
    -> EXTERN: (98,13) gettimeofday
  -> (59,7) evolve (isz = 346) (sz = 353)
     [[ Inlining would exceed -inline-max-size value (353>230) <1>]]
  -> INLINE: (60,12) second (isz = 10) (sz = 15)
    -> EXTERN: (98,13) gettimeofday
  -> EXTERN: (61,7) printf
  -> EXTERN: (62,7) printf
  -> EXTERN: (65,7) sprintf
  -> EXTERN: (66,13) fopen
  -> EXTERN: (69,9) perror
  -> EXTERN: (70,9) exit
  -> EXTERN: (74,8) fprintf
  -> EXTERN: (79,7) fclose
  -> INLINE: (81,9) second (isz = 10) (sz = 15)
    -> EXTERN: (98,13) gettimeofday
  -> EXTERN: (82,3) printf


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at control.c(44,3)
   remark #15527: loop was not vectorized: function call to fscanf cannot be vectorized   [ control.c(45,5) ]
LOOP END

LOOP BEGIN at control.c(57,4)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ control.c(70,9) ]

   LOOP BEGIN at control.c(73,7)
      remark #15527: loop was not vectorized: function call to fprintf cannot be vectorized   [ control.c(74,8) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

control.c(14,33):remark #34051: REGISTER ALLOCATION : [main] control.c:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     139
            Global    :      39
            Local     :     100
        Regenerable   :      55
        Spilled       :       8
        
    Routine stack
        Variables     :     180 bytes*
            Reads     :      10 [1.62e+01 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [5.56e+00 ~ 0.0%]
            Writes    :       3 [6.11e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: evolve

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve) [2/7=28.6%] MD.c(10,33)
  -> EXTERN: (21,5) printf
  -> EXTERN: (22,5) printf
  -> INLINE (MANUAL): (27,7) wind_visc_force (isz = 18) (sz = 31)
  -> INLINE (MANUAL): (30,11) add_norm (isz = 19) (sz = 28)
  -> INLINE (MANUAL): (33,20) force (isz = 3) (sz = 14)
    -> EXTERN: MD.h:(23,19) pow
  -> EXTERN: (43,7) memset
  -> INLINE (MANUAL): (50,19) add_norm (isz = 19) (sz = 28)
  -> INLINE (MANUAL): (58,22) force (isz = 3) (sz = 14)
    -> EXTERN: MD.h:(23,19) pow
  -> INLINE (MANUAL): (59,24) force (isz = 3) (sz = 14)
    -> EXTERN: MD.h:(23,19) pow
  -> INLINE (MANUAL): (66,22) force (isz = 3) (sz = 14)
    -> EXTERN: MD.h:(23,19) pow
  -> INLINE (MANUAL): (67,24) force (isz = 3) (sz = 14)
    -> EXTERN: MD.h:(23,19) pow


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at MD.c(20,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MD.c(26,5)
      remark #15388: vectorization support: reference vis[j] has aligned access   [ MD.c(27,33) ]
      remark #15388: vectorization support: reference mass[j] has aligned access   [ MD.c(33,38) ]
      remark #15388: vectorization support: reference mass[j] has aligned access   [ MD.c(33,38) ]
      remark #15388: vectorization support: reference mass[j] has aligned access   [ MD.c(33,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <&f[j][i]>, stride is 67   [ MD.h(9,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <&velo[j][i]>, stride is 67   [ MD.h(9,19) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <&f[j][i]>, stride is 67   [ MD.h(9,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <&velo[j][i]>, stride is 67   [ MD.h(9,19) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <&f[j][i]>, stride is 67   [ MD.h(9,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <&velo[j][i]>, stride is 67   [ MD.h(9,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[j]>, stride is 536   [ MD.c(30,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta[k]>, stride is 67   [ MD.h(17,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta[k]>, stride is 67   [ MD.h(17,22) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta[k]>, stride is 67   [ MD.h(17,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta[k]>, stride is 67   [ MD.h(17,22) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta[k]>, stride is 67   [ MD.h(17,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta[k]>, stride is 67   [ MD.h(17,22) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[j][l]>, stride is 67   [ MD.c(33,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[j][l]>, stride is 67   [ MD.c(33,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[j][l]>, stride is 67   [ MD.c(33,46) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[j][l]>, stride is 67   [ MD.c(33,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[j][l]>, stride is 67   [ MD.c(33,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[j][l]>, stride is 67   [ MD.c(33,46) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[j][l]>, stride is 67   [ MD.c(33,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[j][l]>, stride is 67   [ MD.c(33,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[j][l]>, stride is 67   [ MD.c(33,46) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.059
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 4 
      remark #15452: unmasked strided loads: 16 
      remark #15453: unmasked strided stores: 6 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 240 
      remark #15477: vector cost: 105.750 
      remark #15478: estimated potential speedup: 2.260 
      remark #15486: divides: 3 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1024

      LOOP BEGIN at MD.h(8,3) inlined into MD.c(27,7)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END

      LOOP BEGIN at MD.h(16,3) inlined into MD.c(30,11)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END

      LOOP BEGIN at MD.c(32,7)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(42,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=4160

      LOOP BEGIN at MD.c(44,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=4160

         LOOP BEGIN at MD.c(56,11)
            remark #15388: vectorization support: reference f2[l] has aligned access   [ MD.c(58,13) ]
            remark #15388: vectorization support: reference f2[l] has aligned access   [ MD.c(58,13) ]
            remark #15388: vectorization support: reference delta_pos[l] has aligned access   [ MD.c(58,33) ]
            remark #15389: vectorization support: reference f[j][l] has unaligned access   [ MD.c(59,13) ]
            remark #15389: vectorization support: reference f[j][l] has unaligned access   [ MD.c(59,13) ]
            remark #15388: vectorization support: reference delta_pos[l] has aligned access   [ MD.c(59,35) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.471
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 81 
            remark #15477: vector cost: 8.500 
            remark #15478: estimated potential speedup: 2.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at MD.c(64,11)
            remark #15388: vectorization support: reference f2[l] has aligned access   [ MD.c(66,13) ]
            remark #15388: vectorization support: reference f2[l] has aligned access   [ MD.c(66,13) ]
            remark #15388: vectorization support: reference delta_pos[l] has aligned access   [ MD.c(66,33) ]
            remark #15389: vectorization support: reference f[j][l] has unaligned access   [ MD.c(67,13) ]
            remark #15389: vectorization support: reference f[j][l] has unaligned access   [ MD.c(67,13) ]
            remark #15388: vectorization support: reference delta_pos[l] has aligned access   [ MD.c(67,35) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.471
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 81 
            remark #15477: vector cost: 8.500 
            remark #15478: estimated potential speedup: 2.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at MD.c(46,9)
            remark #25045: Fused Loops: ( 46 16 )

            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END

         LOOP BEGIN at MD.h(16,3) inlined into MD.c(50,19)
            remark #25046: Loop lost in Fusion 
         LOOP END

         LOOP BEGIN at MD.c(56,11)
         <Remainder loop for vectorization>
            remark #25436: completely unrolled by 1  
         LOOP END

         LOOP BEGIN at MD.c(64,11)
         <Remainder loop for vectorization>
            remark #25436: completely unrolled by 1  
         LOOP END
      LOOP END

      LOOP BEGIN at MD.c(73,7)
         remark #15389: vectorization support: reference f[i][l] has unaligned access   [ MD.c(74,9) ]
         remark #15389: vectorization support: reference f[i][l] has unaligned access   [ MD.c(74,9) ]
         remark #15388: vectorization support: reference f2[l] has aligned access   [ MD.c(74,20) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 0.890 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(79,5)
      remark #15388: vectorization support: reference mass[i] has aligned access   [ MD.c(82,37) ]
      remark #15388: vectorization support: reference mass[i] has aligned access   [ MD.c(82,37) ]
      remark #15388: vectorization support: reference mass[i] has aligned access   [ MD.c(82,37) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <pos[i][j]>, stride is 67   [ MD.c(81,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[i][j]>, stride is 67   [ MD.c(81,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <velo[i][j]>, stride is 67   [ MD.c(81,27) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <velo[i][j]>, stride is 67   [ MD.c(82,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <velo[i][j]>, stride is 67   [ MD.c(82,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[i][j]>, stride is 67   [ MD.c(82,29) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <pos[i][j]>, stride is 67   [ MD.c(81,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[i][j]>, stride is 67   [ MD.c(81,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <velo[i][j]>, stride is 67   [ MD.c(81,27) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <velo[i][j]>, stride is 67   [ MD.c(82,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <velo[i][j]>, stride is 67   [ MD.c(82,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[i][j]>, stride is 67   [ MD.c(82,29) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <pos[i][j]>, stride is 67   [ MD.c(81,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <pos[i][j]>, stride is 67   [ MD.c(81,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <velo[i][j]>, stride is 67   [ MD.c(81,27) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <velo[i][j]>, stride is 67   [ MD.c(82,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <velo[i][j]>, stride is 67   [ MD.c(82,9) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[i][j]>, stride is 67   [ MD.c(82,29) ]
      remark #15305: vectorization support: vector length 4
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 12 
      remark #15453: unmasked strided stores: 6 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 136 
      remark #15477: vector cost: 84.750 
      remark #15478: estimated potential speedup: 1.600 
      remark #15486: divides: 3 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1024

      LOOP BEGIN at MD.c(80,7)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

MD.h(9,5):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.h(9,5):remark #34065: adjacent sparse (strided) stores partitioned for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.h(9,5):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000004 }.
MD.h(9,5):remark #34033: adjacent sparse (strided) stores are not optimized. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000003 }.
MD.h(17,5):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.c(33,9):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.c(33,46):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.c(33,9):remark #34065: adjacent sparse (strided) stores partitioned for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.c(33,9):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000004 }.
MD.c(33,9):remark #34033: adjacent sparse (strided) stores are not optimized. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000003 }.
MD.c(81,9):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.c(81,27):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.c(82,29):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.c(81,9):remark #34065: adjacent sparse (strided) stores partitioned for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.c(81,9):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000004 }.
MD.c(81,9):remark #34033: adjacent sparse (strided) stores are not optimized. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000003 }.
MD.c(82,9):remark #34065: adjacent sparse (strided) stores partitioned for speed. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
MD.c(82,9):remark #34070: adjacent sparse (strided) stores seem unprofitable to optimize. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000004 }.
MD.c(82,9):remark #34033: adjacent sparse (strided) stores are not optimized. Details: stride { 536 }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000003 }.
MD.c(43,7):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
MD.c(10,33):remark #34051: REGISTER ALLOCATION : [evolve] MD.c:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r12 r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     224
            Global    :      43
            Local     :     181
        Regenerable   :      12
        Spilled       :       6
        
    Routine stack
        Variables     :     536 bytes*
            Reads     :       7 [1.51e+08 ~ 4.8%]
            Writes    :       6 [1.51e+08 ~ 4.8%]
        Spills        :     120 bytes*
            Reads     :       6 [7.65e+00 ~ 0.0%]
            Writes    :       6 [5.40e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: wind_visc_force

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (wind_visc_force) MD.h(6,117)

===========================================================================

Begin optimization report for: add_norm

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (add_norm) MD.h(13,56)

===========================================================================

Begin optimization report for: force

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (force) MD.h(22,54)

===========================================================================

Begin optimization report for: second

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (second) control.c(87,1)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: MD.c
        evolve[Line    10]

  File: control.c
        main  [Line    14]


  0 out of 2 routine(s) used training profile data for PGO feedback
  0 out of 2 routine(s) were unable to use training profile data for PGO feedback
  0 out of 2 routine(s) were unable to find training profile data for PGO feedback
  2 out of 2 routine(s) used a static estimate profile for PGO feedback




    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

