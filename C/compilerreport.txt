Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823

Compiler options: -g -O3 -restrict -ipo -qopt-report-file=compilerreport.txt -qopt-report=5 -o MD -lm

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: true
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: true

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main) [1/7=14.3%] control.c(14,33)
  -> INLINE (MANUAL): (28,11) atoi.2 (isz = 4) (sz = 11)
    -> EXTERN: /usr/include/stdlib.h:(280,16) strtol
  -> EXTERN: (37,8) fopen
  -> EXTERN: (40,5) perror
  -> EXTERN: (41,5) exit
  -> EXTERN: (45,5) fscanf
  -> EXTERN: (50,3) fclose
  -> INLINE: (56,11) second (isz = 9) (sz = 14)
    -> EXTERN: (98,13) gettimeofday
  -> INLINE: (58,13) second (isz = 9) (sz = 14)
    -> EXTERN: (98,13) gettimeofday
  -> (59,7) evolve (isz = 347) (sz = 354)
     [[ Inlining would exceed -inline-max-size value (354>230) <1>]]
  -> INLINE: (60,12) second (isz = 9) (sz = 14)
    -> EXTERN: (98,13) gettimeofday
  -> EXTERN: (61,7) printf
  -> EXTERN: (62,7) printf
  -> EXTERN: (65,7) sprintf
  -> EXTERN: (66,13) fopen
  -> EXTERN: (69,2) perror
  -> EXTERN: (70,2) exit
  -> EXTERN: (74,2) fprintf
  -> EXTERN: (79,7) fclose
  -> INLINE: (81,9) second (isz = 9) (sz = 14)
    -> EXTERN: (98,13) gettimeofday
  -> EXTERN: (82,3) printf


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at control.c(44,3)
   remark #15527: loop was not vectorized: function call to fscanf cannot be vectorized   [ control.c(45,5) ]
LOOP END

LOOP BEGIN at control.c(57,4)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ control.c(70,2) ]

   LOOP BEGIN at control.c(73,7)
      remark #15527: loop was not vectorized: function call to fprintf cannot be vectorized   [ control.c(74,2) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

control.c(14,33):remark #34051: REGISTER ALLOCATION : [main] control.c:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     140
            Global    :      37
            Local     :     103
        Regenerable   :      55
        Spilled       :       7
        
    Routine stack
        Variables     :     180 bytes*
            Reads     :      10 [1.62e+01 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [3.70e+00 ~ 0.0%]
            Writes    :       3 [4.81e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: evolve

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (evolve) [2/7=28.6%] MD.c(10,33)
  -> EXTERN: (19,5) printf
  -> EXTERN: (20,5) printf
  -> (25,7) wind_visc_force (isz = 24) (sz = 37)
     [[ Call is inside loop with SIMD pragma and callee has SIMD pragma  <2>]]
  -> EXTERN: (29,5) memset
  -> INLINE (MANUAL): (38,20) force (isz = 2) (sz = 13)
    -> EXTERN: MD.h:(23,19) pow
  -> EXTERN: (55,5) memset
  -> INLINE (MANUAL): (79,24) force (isz = 2) (sz = 13)
    -> EXTERN: MD.h:(23,19) pow
  -> INLINE (MANUAL): (80,24) force (isz = 2) (sz = 13)
    -> EXTERN: MD.h:(23,19) pow
  -> INLINE (MANUAL): (86,24) force (isz = 2) (sz = 13)
    -> EXTERN: MD.h:(23,19) pow
  -> INLINE (MANUAL): (87,24) force (isz = 2) (sz = 13)
    -> EXTERN: MD.h:(23,19) pow


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at MD.c(18,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MD.c(24,5)
      remark #15388: vectorization support: reference wind[j] has aligned access   [ MD.c(25,46) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[j]>, stride is 33280   [ MD.c(25,29) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <velo[j]>, stride is 33280   [ MD.c(25,38) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.007
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 116 
      remark #15477: vector cost: 141.000 
      remark #15478: estimated potential speedup: 0.860 
      remark #15485: serialized function calls: 1
      remark #15488: --- end vector cost summary ---
      remark #15489: --- begin vector function matching report ---
      remark #15490: Function call: wind_visc_force with simdlen=2, actual parameter types: (uniform,vector,uniform,vector,vector)   [ MD.c(25,7) ]
      remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
      remark #15493: --- end vector function matching report ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at MD.c(24,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at MD.c(31,5)
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(33,9) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(33,9) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(33,18) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(33,29) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(33,9) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(33,9) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(33,18) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(33,29) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(33,9) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(33,9) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(33,18) ]
      remark #15388: vectorization support: reference pos[i][k] has aligned access   [ MD.c(33,29) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(35,7) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(35,19) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(38,56) ]
      remark #15388: vectorization support: reference f[l][k] has aligned access   [ MD.c(38,9) ]
      remark #15388: vectorization support: reference f[l][k] has aligned access   [ MD.c(38,9) ]
      remark #15388: vectorization support: reference mass[k] has aligned access   [ MD.c(38,38) ]
      remark #15388: vectorization support: reference pos[l][k] has aligned access   [ MD.c(38,46) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(38,56) ]
      remark #15388: vectorization support: reference f[l][k] has aligned access   [ MD.c(38,9) ]
      remark #15388: vectorization support: reference f[l][k] has aligned access   [ MD.c(38,9) ]
      remark #15388: vectorization support: reference mass[k] has aligned access   [ MD.c(38,38) ]
      remark #15388: vectorization support: reference pos[l][k] has aligned access   [ MD.c(38,46) ]
      remark #15388: vectorization support: reference r[k] has aligned access   [ MD.c(38,56) ]
      remark #15388: vectorization support: reference f[l][k] has aligned access   [ MD.c(38,9) ]
      remark #15388: vectorization support: reference f[l][k] has aligned access   [ MD.c(38,9) ]
      remark #15388: vectorization support: reference mass[k] has aligned access   [ MD.c(38,38) ]
      remark #15388: vectorization support: reference pos[l][k] has aligned access   [ MD.c(38,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.051
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 16 
      remark #15449: unmasked aligned unit stride stores: 7 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 209 
      remark #15477: vector cost: 107.000 
      remark #15478: estimated potential speedup: 1.950 
      remark #15486: divides: 3 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 9
      remark #25015: Estimate of max trip count of loop=2048

      LOOP BEGIN at MD.c(32,7)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END

      LOOP BEGIN at MD.c(37,11)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(44,5)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 3 1 2 ) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MD.c(46,7)
      <Peeled loop for vectorization>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at MD.c(46,7)
         remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
         remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
         remark #15388: vectorization support: reference delta_pos[l][k] has aligned access   [ MD.c(48,11) ]
         remark #15388: vectorization support: reference pos[l][j] has aligned access   [ MD.c(48,41) ]
         remark #15388: vectorization support: reference delta_pos[l][k] has aligned access   [ MD.c(48,11) ]
         remark #15388: vectorization support: reference pos[l][j] has aligned access   [ MD.c(48,41) ]
         remark #15388: vectorization support: reference delta_pos[l][k] has aligned access   [ MD.c(48,11) ]
         remark #15388: vectorization support: reference pos[l][j] has aligned access   [ MD.c(48,41) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.344
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 3 
         remark #15449: unmasked aligned unit stride stores: 3 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 20 
         remark #15477: vector cost: 8.000 
         remark #15478: estimated potential speedup: 2.480 
         remark #15488: --- end vector cost summary ---

         LOOP BEGIN at MD.c(47,9)
            remark #25436: completely unrolled by 3   (pre-vector) 
         LOOP END
      LOOP END

      LOOP BEGIN at MD.c(46,7)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at MD.c(46,7)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference delta_pos[l][k] has aligned access   [ MD.c(48,11) ]
         remark #15389: vectorization support: reference pos[l][j] has unaligned access   [ MD.c(48,41) ]
         remark #15388: vectorization support: reference delta_pos[l][k] has aligned access   [ MD.c(48,11) ]
         remark #15389: vectorization support: reference pos[l][j] has unaligned access   [ MD.c(48,41) ]
         remark #15388: vectorization support: reference delta_pos[l][k] has aligned access   [ MD.c(48,11) ]
         remark #15389: vectorization support: reference pos[l][j] has unaligned access   [ MD.c(48,41) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.871
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(57,5)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(59,9) ]
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(59,9) ]
      remark #15388: vectorization support: reference delta_pos[i][k] has aligned access   [ MD.c(59,24) ]
      remark #15388: vectorization support: reference delta_pos[i][k] has aligned access   [ MD.c(59,42) ]
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(59,9) ]
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(59,9) ]
      remark #15388: vectorization support: reference delta_pos[i][k] has aligned access   [ MD.c(59,24) ]
      remark #15388: vectorization support: reference delta_pos[i][k] has aligned access   [ MD.c(59,42) ]
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(59,9) ]
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(59,9) ]
      remark #15388: vectorization support: reference delta_pos[i][k] has aligned access   [ MD.c(59,24) ]
      remark #15388: vectorization support: reference delta_pos[i][k] has aligned access   [ MD.c(59,42) ]
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(61,7) ]
      remark #15388: vectorization support: reference delta_r[k] has aligned access   [ MD.c(61,25) ]
      remark #15305: vectorization support: vector length 2
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 7 
      remark #15449: unmasked aligned unit stride stores: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 70 
      remark #15477: vector cost: 29.000 
      remark #15478: estimated potential speedup: 2.410 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 9
      remark #25015: Estimate of max trip count of loop=4193280

      LOOP BEGIN at MD.c(58,7)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(70,5)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=4160

      LOOP BEGIN at MD.c(71,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=4160

         LOOP BEGIN at MD.c(78,11)
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[l][i]>, stride is 4160   [ MD.c(79,13) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[l][i]>, stride is 4160   [ MD.c(79,13) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[l][k]>, stride is 16777280   [ MD.c(79,35) ]
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[l][j]>, stride is 4160   [ MD.c(80,13) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[l][j]>, stride is 4160   [ MD.c(80,13) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[l][k]>, stride is 16777280   [ MD.c(80,35) ]
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.078
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15452: unmasked strided loads: 4 
            remark #15453: unmasked strided stores: 2 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 87 
            remark #15477: vector cost: 51.000 
            remark #15478: estimated potential speedup: 1.320 
            remark #15486: divides: 2 
            remark #15488: --- end vector cost summary ---
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at MD.c(85,11)
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[l][i]>, stride is 4160   [ MD.c(86,13) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[l][i]>, stride is 4160   [ MD.c(86,13) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[l][k]>, stride is 16777280   [ MD.c(86,35) ]
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <f[l][j]>, stride is 4160   [ MD.c(87,13) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <f[l][j]>, stride is 4160   [ MD.c(87,13) ]
            remark #15328: vectorization support: non-unit strided load was emulated for the variable <delta_pos[l][k]>, stride is 16777280   [ MD.c(87,35) ]
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.078
            remark #15301: SIMD LOOP WAS VECTORIZED
            remark #15452: unmasked strided loads: 4 
            remark #15453: unmasked strided stores: 2 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 87 
            remark #15477: vector cost: 51.000 
            remark #15478: estimated potential speedup: 1.320 
            remark #15486: divides: 2 
            remark #15488: --- end vector cost summary ---
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at MD.c(78,11)
         <Remainder loop for vectorization>
            remark #25436: completely unrolled by 1  
         LOOP END

         LOOP BEGIN at MD.c(85,11)
         <Remainder loop for vectorization>
            remark #25436: completely unrolled by 1  
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at MD.c(100,5)
      remark #15388: vectorization support: reference pos[j][i] has aligned access   [ MD.c(102,9) ]
      remark #15388: vectorization support: reference pos[j][i] has aligned access   [ MD.c(102,9) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(102,27) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(103,9) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(103,9) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(103,29) ]
      remark #15388: vectorization support: reference mass[i] has aligned access   [ MD.c(103,37) ]
      remark #15388: vectorization support: reference pos[j][i] has aligned access   [ MD.c(102,9) ]
      remark #15388: vectorization support: reference pos[j][i] has aligned access   [ MD.c(102,9) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(102,27) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(103,9) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(103,9) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(103,29) ]
      remark #15388: vectorization support: reference mass[i] has aligned access   [ MD.c(103,37) ]
      remark #15388: vectorization support: reference pos[j][i] has aligned access   [ MD.c(102,9) ]
      remark #15388: vectorization support: reference pos[j][i] has aligned access   [ MD.c(102,9) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(102,27) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(103,9) ]
      remark #15388: vectorization support: reference velo[j][i] has aligned access   [ MD.c(103,9) ]
      remark #15388: vectorization support: reference f[j][i] has aligned access   [ MD.c(103,29) ]
      remark #15388: vectorization support: reference mass[i] has aligned access   [ MD.c(103,37) ]
      remark #15305: vectorization support: vector length 2
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 15 
      remark #15449: unmasked aligned unit stride stores: 6 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 133 
      remark #15477: vector cost: 72.000 
      remark #15478: estimated potential speedup: 1.840 
      remark #15486: divides: 3 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
      remark #25015: Estimate of max trip count of loop=2048

      LOOP BEGIN at MD.c(101,7)
         remark #25436: completely unrolled by 3   (pre-vector) 
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

MD.c(29,5):remark #34026: call to memset implemented as a call to optimized library version
MD.c(55,5):remark #34026: call to memset implemented as a call to optimized library version
MD.c(10,33):remark #34051: REGISTER ALLOCATION : [evolve] MD.c:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     320
            Global    :      79
            Local     :     241
        Regenerable   :      37
        Spilled       :      14
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     120 bytes*
            Reads     :      15 [7.06e+01 ~ 0.0%]
            Writes    :      15 [1.35e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: wind_visc_force

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (wind_visc_force) [3/7=42.9%] MD.h(6,117)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at MD.h(9,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at MD.h(9,3)
   remark #15388: vectorization support: reference f[i] has aligned access   [ MD.h(10,5) ]
   remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.h(10,13) ]
   remark #15389: vectorization support: reference velo[i] has unaligned access   [ MD.h(10,22) ]
   remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.h(10,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.365
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 6.500 
   remark #15478: estimated potential speedup: 2.140 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=512
LOOP END

LOOP BEGIN at MD.h(9,3)
<Alternate Alignment Vectorized Loop>
   remark #25015: Estimate of max trip count of loop=512
LOOP END

LOOP BEGIN at MD.h(9,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference f[i] has unaligned access   [ MD.h(10,5) ]
   remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.h(10,13) ]
   remark #15389: vectorization support: reference velo[i] has unaligned access   [ MD.h(10,22) ]
   remark #15388: vectorization support: reference vis[i] has aligned access   [ MD.h(10,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.783
LOOP END

    Report from: Code generation optimizations [cg]

MD.h(6,117):remark #34051: REGISTER ALLOCATION : [wind_visc_force] MD.h:6

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm9]
        
    Routine temporaries
        Total         :      95
            Global    :      20
            Local     :      75
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: add_norm

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (add_norm) MD.h(15,1)

===========================================================================

Begin optimization report for: force

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (force) MD.h(22,54)

===========================================================================

Begin optimization report for: second

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (second) control.c(87,1)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: MD.c
        evolve         [Line    10]

  File: MD.h
        wind_visc_force[Line     6]

  File: control.c
        main           [Line    14]


  0 out of 3 routine(s) used training profile data for PGO feedback
  0 out of 3 routine(s) were unable to use training profile data for PGO feedback
  0 out of 3 routine(s) were unable to find training profile data for PGO feedback
  3 out of 3 routine(s) used a static estimate profile for PGO feedback




    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

<2> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

